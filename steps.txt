## Templates ##

<-- TASK --> Instead of returning Http Responce return an html templates?

1) create a home and about html?

2) add the created applications to the projects?

3) return the html content of home, about to the views.py 


4) create a dummy post that need to be added to the page?

5) create a context dictionary below the home function and include that in the return render?

6) call the context dictionary in the home page and use the content in the post

7) set condition for the title #like ( if we gave the title it should provide the title and if not it can just reply with django {page} ) and also pass the title in the views?

8) make the home and about file to get the page from the base file

9) copy the Bootstrap starter template(https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqa3NiWWJXUkEzQW5rX2FSak9Ha09BVU9CUjhKUXxBQ3Jtc0ttdjZQQnJHc3B0Q3B6ZmkzU3FjYmgzenpnUHUwaHlHV0RDVV9yeDVuQ1hJSUthUDBNNHdJclJWeXljRG8tSUxVdk5WVnZsV3dwS1RlZEhUamZQaEcybzdqeDB4bHc5V2hfUHNhcXppUWtfSkJuQzZHUQ&q=https%3A%2F%2Fgetbootstrap.com%2Fdocs%2F4.0%2Fgetting-started%2Fintroduction%2F%23starter-template&v=qDwdMDQ8oX4)
and use the container div to the base html

10) Add a Navigation bar to the base template from the snippets from corey and also copy the main.html template from (https://github.com/CoreyMSchafer/code_snippets/tree/master/Django_Blog/snippets)

11) create a new static folder in the app to put the css file static folder and link the css in base

12) Copy the Article.html file and use that article file to show the author post content in base file

13) Give the dynamic code block url to the home and about page in the base file?

-- Admin Page --
#you can't able to log in as admin unless you create a admin login and password, and to need to migrate to databases

1) complete the migration process and create a superuser account

-- DataBases --

1) create a post Models for the DB 
	{ create a title
	  content
	  date_posted
	  author as a foreign key
		}
2) import the needed modules like timezone, Userdate_posted 

3) Make the migrations and update to the DataBases

4) use the sql shelland import the following Post class, User

5)task:
	Print the Users
	Print the First Users
	assign a variable to a first user
	print the user
	print the user id
	print the Post table
 
6) give the Data to the post_1 in the DB?

7) create a dunder str in the models file to show the title or something in the admin page?

8) import the post in the views and delete the post content in the views page and pass the Post ?

9) set date format in the home?

10) register Post in the admin panel

--User Registrations--

Create a New User app so we can hadle all the user logic :)

1) Regiser User app in the Settings installed app

2) create a register views in the Users app ( Function )

3) we want to create a form so that the user can register, if we want to build the form from scratch it will be mre complicated so the django already have the form modules just like the models in the databases

4) import the User creation forms{ from django.contrib.auth.forms import UserCreationForm }

5) return and render the Template which uses this form

6) Create a templates folder in the User app and create a register.html

7) Create a form inside the Div section and assion class as contetn-section and assign method="POST" in form

8)Set an csrf Token to encrypt the Form values

9) Complete the template with buttons and some other features and if the user already have an account give the option to just login

10) Create a Url Pattern in the main Urls.py by importing " from users import views as user_views " give the path 'register/' and the user_views.register and assign a name

" If anyone is doing this tutorial and having troubles with crispy forms, with the help of tutorial and some comments, I found that this works:

1) pip install django_crispy_forms
2) pip install crispy_bootstrap4
3) Add both of these to INSTALLED_APPS:
    'crispy_forms',
    'crispy_bootstrap4',
4) Add both of these at the bottom:
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap4"

CRISPY_TEMPLATE_PACK = 'bootstrap4'
5) Use {% load crispy_forms_tags %} and {{ form|crispy }} in the html file.

As always, great tutorial, thank you, Corey!

 "

--After this We can view the User Registration form -- 

11) create the following 
	if request.method=='POST':
		form = UserCreationFrom(request.POST)
		if form.is_valid():
			username = form.cleaned_data.get('username')
	else:
		form=UserCreationForm()
	return render(request, 'register.html', {'form':form})


and import messages

12) create a flash message when we press the buttons "messages.succes(request, f'Accunt created for {username}!')"

13) and when user created redirect to the blog home
def register(request):
    if request.method == 'POST':
        form = UserCreationForm(request.POST)
        if form.is_valid():
            username = form.cleaned_data.get('username')
            form.save()
            messages.success(request, f'Account created for {username}')
            return redirect('blog-home')

    else:
        form = UserCreationForm()

    return render(request, 'register.html',{'form':form})

	and change in the base.html for Messages to show

' forms is linked with the DB but How , we are import the Form from the DB so it will be Linked '

14) How to add a new Field in the Form For that we neeed to Create a Form.py file

from django import forms
from django.contrib.auth.models import User
from django.contrib.auth.forms import UserCreationForm

class UserRegisterForm(UserCreationForm):
    email = forms.EmailField()

    class meta:
        model = User
        fields = ['username', 'email', 'password1', 'password2']
        
15) Change the imported forms in the views .py

-- Login and Logout --

1) django internally gives us the login and logout forms so we r going to import that
	' from django.contrib.auth import views as auth_views ' in main urls

2)  path('login/', auth_views.LoginView.as_view(), name = 'login'),
	path('logout/', auth_views.LogoutView.as_view, name = 'logout'),

3) copy the register file adjust the login and logout html

4) set in the settings.py inthe End and add " LOGIN_REDIRECT_URL = 'blog-home' "

5) After Registered we need to redirect to the Login Page

6) After Logged Out it need to display LoggedOut and login again

after this ogout page will not working " If you have error 405 page on logout page it may be due to latest django version this is what I did to get round it. In users views folder i put this code 
from django.contrib.auth import logout
def logout_view(request):
    logout(request)
    return render(request, 'users/logout.html')

then in main project urls I put this in urr parttern list
 path("logout/", user_views.logout_view, name="logout"), "

7) change the Base Page like if you have logged in the nav bar should be different and if its not 
	"{% if user.is_authenticated %}
                <a class="nav-item nav-link" href="{% url 'logout' %}">Logout</a>
              {% else %}
                <a class="nav-item nav-link" href="{% url 'login' %}">Login</a>
                <a class="nav-item nav-link" href="{% url 'register' %}">Register</a>
              {% endif %}"

8) Create a profile page for the user profile 
    1) create a Profile.html and call the username
    2) create a views Function
    3) the profile will be accesable to the users if they logged or logged out so we need to put an authentication 
    4) For authentication django provide an decorator import and decorator " from django.contrib.auth.decorators import login_required "
    5) and add that decorator to the  Function
    6) it will search that page in other  file
    7) so we need to tell the django to search in other path
    8) project -> settings -> Last Line -> LOGIN_URL = 'login'


<--> User Profile and Picture <-->

to give an User a Profile Information about the User

1) Create a model for that in the user app
2) to use the user import the following " from django.contrib.auth.models import User "
3) Create a data for User in OneToOneFeld
4) Create a data for image in imagefield
5) And create a Str field to return the models "def __str__(self):
    return f'{self.user.username} Profile'"
6) Register this models to the admin page and Check In the Server
7) Use thr Shell to interact with the Created page
8) so that the Pictures that we upload will be saves in the Main app so We Need to Redirect that to another
9) Create an MEDIA_ROOT and MEDIA_URL in the settings.py
